import fs from 'fs';
import * as httpie from 'httpie/node';
import open from 'open';
import config from '../config.js';
import authenticate from '../tools/auth.js';
import simpleGit, { GitError } from 'simple-git';

const COLYSEUS_CLOUD_JSON = '.colyseus-cloud.json';

async function getColyseusCloudConfig() {
  // read local .colyseus-cloud.json
  if (fs.existsSync(COLYSEUS_CLOUD_JSON)) {
    try {
      const fileContents = await fs.promises.readFile(COLYSEUS_CLOUD_JSON, 'utf8');
      return JSON.parse(fileContents);

    } catch (e) {
      console.error(e);
      process.exit();
    }
  }

  return {};
}

async function getGitData() {
  const cwd = process.cwd();

  try {
    const git = simpleGit(cwd);

    const remotes = await git.getRemotes(true);
    if (!remotes[0]) { throw new Error("no git remote") }

    const remote = remotes[0].refs.fetch;
    const branch = (await git.branch()).current;

    // TODO: check for files not pushed
    // + ask user if it wants to deploy anyway

    return { branch, remote };

  } catch (e) {
    if (e instanceof GitError) {
      console.log(`❌ Git is not set up. (${e.message})`);
      console.log("");
      console.log("Your project must be using git in order to deploy to Colyseus Cloud:");
      console.log("\tgit init");
      console.log("\tgit remote add origin git@github.com:user/repo.git (use YOUR 'user' and 'repo' names here)");
      console.log("\tgit add .");
      console.log("\tgit push origin main");
      console.log("");
      console.log("Then try again.");

    } else {
      console.error(e);
    }
  }
}

export default async function deploy(options) {
  try {
    // detect current branch
    let { branch, remote } = await getGitData();
    if (!branch || !remote) {
      console.error("Need a git remote and branch to deploy.");
      process.exit();
    }

    if (!options.env) {
      options.env = "production";
    }

    // allow to override 'branch' and 'remote'
    if (options.branch) { branch = options.branch; }
    if (options.remote) { remote = options.remote; }

    console.log("Environment: " + options.env);

    // read local .colyseus-cloud.json config file.
    const colyseusConfigFile = await getColyseusCloudConfig();

    // when .reset is provided, force new authentication
    if (options.reset) {
      colyseusConfigFile[options.env] = undefined;
    }

    // check if requested environment is present
    if (!colyseusConfigFile[options.env]) {
      // authenticate to retrieve environment data
      const envData = await authenticate();

      // combine with existing config
      colyseusConfigFile[options.env] = envData;

      // write to file
      await fs.promises.writeFile(COLYSEUS_CLOUD_JSON, JSON.stringify(colyseusConfigFile, null, 2));
    }

    const data = colyseusConfigFile[options.env];

    // throw if invalid data
    if (!data.applicationId || !data.token) {
      throw new Error(".colyseus-cloud.json '" + options.env + "' must contain valid 'applicationId' and 'token' fields.");
    }

    // TODO: hit webhook for deployment with token
    try {
      // workaround for testing locally
      var endpoint = config.endpoint;
      endpoint = endpoint.replace("localhost", "127.0.0.1");

      await httpie.post(`${endpoint}/deploy`, {
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          slug: data.applicationId,
          token: data.token,
          remote,
          branch
        })
      });

    } catch (e) {
      if (e.data && e.data.error) {
        console.log("");
        console.error(`❌ ${e.data.error}`);

        if (e.data.error.indexOf("token") >= 0) {
          console.log(`❗️ Consider deleting the ${COLYSEUS_CLOUD_JSON} file and trying again (or provide --reset)`);
        }
        console.log("");

      } else {
        console.error(e.message);
      }

      process.exit();
    }

    const previewURL = `${config.endpoint}/application/${data.applicationId}/deployment_logs`;
    console.log('Deployment triggered.');

    if (options.preview) {
      open(previewURL);

    } else {
      console.log(`You can preview your deployment here: ${previewURL} (use --preview to open automatically)`);
    }

  } catch (e) {
    console.error(e);
  }

};
