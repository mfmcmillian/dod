/**
 * Usage
 **
    const data = { foo: 'bar' }
    const trackEntity = (data: any) => { log('do stuff with data') }
    const trackEntityController = OnUpdateFrame.add(trackEntity, data)
    trackEntityController.start()
    Wait(() => { trackEntityController.stop() }, 3)
*/
/// <reference types="dcl" />
export interface Dash_OnUpdateFrame_Setting {
    id?: number;
    data?: any;
    onFrame?: (dt: number) => void;
}
export interface Dash_OnUpdateFrame_Instance {
    start: () => void;
    stop: () => void;
}
export declare class Dash_OnUpdateFrame_Controller implements ISystem {
    private system;
    private nonce;
    private queue;
    constructor();
    add(onFrame: (dt: number) => void): Dash_OnUpdateFrame_Instance;
    update(dt: number): void;
    enable(): void;
    disable(): void;
}
export declare const Dash_OnUpdateFrame: Dash_OnUpdateFrame_Controller;
//# sourceMappingURL=OnUpdateFrame.d.ts.map