{"version":3,"file":"index.js","sources":["../src/mana.ts","../src/index.ts"],"sourcesContent":["import * as eth from 'eth-connect'\nimport * as dclTx from 'decentraland-transactions'\n\nexport type Providers = {\n  requestManager: eth.RequestManager\n  metaRequestManager: eth.RequestManager\n  fromAddress: string\n}\n\nexport interface IMANAComponents {\n  balance: (from?: string) => Promise<string>\n  allowance: (spenderAddress: string, from?: string) => Promise<string>\n  approve: (spenderAddress: string, amount?: eth.BigNumber) => Promise<string>\n  transfer: (to: string, amount: eth.BigNumber) => Promise<string>\n}\n\nexport function createMANAComponent({\n  requestManager,\n  metaRequestManager,\n  fromAddress,\n}: Providers): IMANAComponents {\n  async function getContract() {\n    const manaConfig = dclTx.getContract(dclTx.ContractName.MANAToken, 137)\n    let contract: any = await new eth.ContractFactory(metaRequestManager, manaConfig.abi).at(\n      manaConfig.address\n    )\n\n    return {\n      manaConfig,\n      contract,\n    }\n  }\n\n  async function balance(from?: string) {\n    const { manaConfig, contract } = await getContract()\n    const res = await contract.balanceOf(from || fromAddress)\n\n    return res\n  }\n\n  async function allowance(spenderAddress: string, from?: string) {\n    const { manaConfig, contract } = await getContract()\n    const res = await contract.allowance(from || fromAddress, spenderAddress)\n\n    return res\n  }\n\n  async function approve(spenderAddress: string, amount?: eth.BigNumber) {\n    const { manaConfig, contract } = await getContract()\n\n    const functionHex = contract.approve.toPayload(\n      spenderAddress,\n      amount || '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n    )\n\n    const txHash = await dclTx.sendMetaTransaction(\n      requestManager as any,\n      metaRequestManager as any,\n      functionHex.data,\n      manaConfig,\n      { serverURL: 'https://transactions-api.decentraland.org/v1' }\n    )\n    return txHash\n  }\n  async function transfer(to: string, amount: eth.BigNumber) {\n    const { manaConfig, contract } = await getContract()\n\n    const functionHex = contract.transfer.toPayload(to, amount)\n\n    const txHash = await dclTx.sendMetaTransaction(\n      requestManager as any,\n      metaRequestManager as any,\n      functionHex.data,\n      manaConfig,\n      { serverURL: 'https://transactions-api.decentraland.org/v1' }\n    )\n    return txHash\n  }\n  return { transfer, balance, allowance, approve }\n}\n","import { getUserAccount } from '@decentraland/EthereumController'\nimport { getProvider } from '@decentraland/web3-provider'\nimport * as eth from 'eth-connect'\nimport { createMANAComponent } from './mana'\n\nexport async function createComponents() {\n    const provider = await getProvider()\n    const requestManager: any = new eth.RequestManager(provider)\n    const metaProvider: any = new eth.HTTPProvider('https://polygon-rpc.com')\n    const fromAddress = await getUserAccount()\n    const metaRequestManager: any = new eth.RequestManager(metaProvider)\n    const providers = {\n      requestManager,\n      metaProvider,\n      metaRequestManager,\n      fromAddress,\n    }\n\n    const mana = await createMANAComponent(providers)\n\n    return { mana } \n}\n"],"names":["createMANAComponent","_a","requestManager","metaRequestManager","fromAddress","getContract","manaConfig","dclTx","ContractName","MANAToken","eth","ContractFactory","abi","at","address","contract","sent","transfer","to","amount","_b","functionHex","toPayload","sendMetaTransaction","data","serverURL","balance","from","balanceOf","allowance","spenderAddress","approve","getProvider","provider","RequestManager","metaProvider","HTTPProvider","getUserAccount","mana"],"mappings":"sxDAgBM,SAAUA,EAAoBC,GAClC,IAAAC,mBACAC,EAAkBF,EAAAE,mBAClBC,EAAWH,EAAAG,YAEX,SAAeC,sGAEO,OADdC,EAAaC,EAAMF,YAAYE,EAAMC,aAAaC,UAAW,KAC/C,CAAA,EAAM,IAAIC,EAAIC,gBAAgBR,EAAoBG,EAAWM,KAAKC,GACpFP,EAAWQ,iBAGb,OAJIC,EAAgBd,EAEnBe,OAEM,CAAA,EAAA,CACLV,WAAUA,EACVS,SAAQA,UAEX,CA+CD,MAAO,CAAEE,SAdT,SAAwBC,EAAYC,yGACD,MAAM,CAAA,EAAAd,YAIxB,OAJTJ,EAA2BmB,SAAzBd,EAAUL,EAAAK,WAAES,EAAQd,EAAAc,SAEtBM,EAAcN,EAASE,SAASK,UAAUJ,EAAIC,GAE/B,CAAA,EAAAZ,EAAMgB,oBACzBrB,EACAC,EACAkB,EAAYG,KACZlB,EACA,CAAEmB,UAAW,yDAEf,MAAA,CAAA,EAPeL,EAMdJ,cAEF,EACkBU,QA7CnB,SAAuBC,mGACY,MAAM,CAAA,EAAAtB,YAC3B,OADNJ,EAA2BmB,UAAfd,WACA,CAAA,EADUL,EAAAc,SACDa,UAAUD,GAAQvB,WAE7C,MAAA,CAAA,EAFYgB,EAA6CJ,cAG1D,EAwC2Ba,UAtC5B,SAAyBC,EAAwBH,mGACd,MAAM,CAAA,EAAAtB,YAC3B,OADNJ,EAA2BmB,UAAfd,WACA,CAAA,EADUL,EAAAc,SACDc,UAAUF,GAAQvB,EAAa0B,WAE1D,MAAA,CAAA,EAFYV,EAA6DJ,cAG1E,EAiCsCe,QA/BvC,SAAuBD,EAAwBX,yGACZ,MAAM,CAAA,EAAAd,YAOxB,OAPTJ,EAA2BmB,SAAzBd,EAAUL,EAAAK,WAAES,EAAQd,EAAAc,SAEtBM,EAAcN,EAASgB,QAAQT,UACnCQ,EACAX,GAAU,sEAGS,CAAA,EAAAZ,EAAMgB,oBACzBrB,EACAC,EACAkB,EAAYG,KACZlB,EACA,CAAEmB,UAAW,yDAEf,MAAA,CAAA,EAPeL,EAMdJ,cAEF,EAgBH,uICzEqB,MAAM,CAAA,EAAAgB,EAAAA,sBAGH,OAHdC,EAAWhC,EAAmBe,OAC9Bd,EAAsB,IAAIQ,EAAIwB,eAAeD,GAC7CE,EAAoB,IAAIzB,EAAI0B,aAAa,2BACrB,CAAA,EAAAC,EAAcA,yBAS3B,OATPjC,EAAcH,EAAsBe,OACpCb,EAA0B,IAAIO,EAAIwB,eAAeC,GAQ1C,CAAA,EAAMnC,EAPD,CAChBE,eAAcA,EACdiC,aAAYA,EACZhC,mBAAkBA,EAClBC,YAAWA,YAKb,MAAA,CAAA,EAAO,CAAEkC,KAFIrC,EAAoCe,eAGpD"}